name: Build and Publish

on:
  workflow_dispatch:

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-24.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: MoonBit CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.moon
          key: ${{ runner.os }}-moon-${{ hashFiles('**/moon.pkg.json','moon.mod.json') }}
          restore-keys: |
            ${{ runner.os }}-moon-

      - name: Install MoonBit CLI (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          iwr https://cli.moonbitlang.cn/install/powershell.ps1 -UseBasicParsing | iex
          "$Env:USERPROFILE/.moon/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # 立即在当前 step 生效 PATH
          $env:PATH = "$Env:USERPROFILE/.moon/bin;" + $env:PATH
          $moonBin = Join-Path $Env:USERPROFILE ".moon/bin"
          $moonExe = Join-Path $moonBin "moon.exe"
          $moonNoExt = Join-Path $moonBin "moon"
          if (-not (Test-Path $moonExe) -and -not (Test-Path $moonNoExt)) {
            Write-Host "目录结构 (调试):"
            Get-ChildItem -Recurse $moonBin | Select-Object FullName,Length,LastWriteTime
            Write-Error 'MoonBit CLI 安装失败: 未找到 moon 或 moon.exe 可执行文件'
            exit 1
          }
          if (Test-Path $moonExe) { & $moonExe version } else { & $moonNoExt version }

      - name: MoonBit registry update (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          moon update
          if ($LASTEXITCODE -ne 0) {
            Write-Warning 'moon update failed (network/registry issue); continuing build'
          } else {
            Write-Host 'moon update succeeded'
          }

      - name: Install MoonBit CLI (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          curl -fsSL https://cli.moonbitlang.cn/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          # 让当前 step 也能使用 moon（echo 到 GITHUB_PATH 只对后续 steps 生效）
          export PATH="$HOME/.moon/bin:$PATH"
          test -x "$HOME/.moon/bin/moon" || { echo 'MoonBit CLI 安装失败: 未找到 moon 可执行文件'; exit 1; }
          moon version

      - name: MoonBit registry update (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          if moon update; then
            echo "moon update 成功"
          else
            echo "[警告] moon update 失败(可能网络/registry)，继续后续构建" >&2
          fi

      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf pkg-config libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev libsoup-3.0-dev

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node (npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies with npm
        run: |
          npm install
          npx wasm4 --version || echo "npx wasm4 暂不可用(可能未装), 继续"

      - name: Verify wasm4 via bun & npm
        run: |
          bun x wasm4 --version || echo "bun x wasm4 失败"
          npx wasm4 --version || echo "npx wasm4 失败"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache Bun install cache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Bun install cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\.bun\install\cache
          key: ${{ runner.os }}-bun-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend dependencies
        run: bun install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ad-hoc signing for macOS to allow building without certificates
          APPLE_SIGNING_IDENTITY: ${{ matrix.platform == 'macos-latest' && '-' || '' }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  # Android 构建（使用 Tauri v2 移动支持）
  build-android:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: MoonBit CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.moon
          key: ${{ runner.os }}-moon-${{ hashFiles('**/moon.pkg.json','moon.mod.json') }}
          restore-keys: |
            ${{ runner.os }}-moon-

      - name: Install MoonBit CLI
        run: |
          curl -fsSL https://cli.moonbitlang.cn/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          export PATH="$HOME/.moon/bin:$PATH"
          test -x "$HOME/.moon/bin/moon" || { echo 'MoonBit CLI 安装失败: 未找到 moon 可执行文件'; exit 1; }

      - name: MoonBit registry update
        run: |
          set -e
          if moon update; then
            echo "moon update 成功"
          else
            echo "[警告] moon update 失败(可能网络/registry)，继续后续构建" >&2
          fi

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node (npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies with npm
        run: |
          npm install
          npx wasm4 --version || echo "npx wasm4 暂不可用(可能未装), 继续"

      - name: Verify wasm4 via bun & npm
        run: |
          bun x wasm4 --version || echo "bun x wasm4 失败"
          npx wasm4 --version || echo "npx wasm4 失败"

      - name: Setup Java (Android 构建需要 JDK 17)
        uses: actions/setup-java@v4
        with:
            distribution: 'temurin'
            java-version: '17'

      - name: Install Rust (含 Android 目标)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android

      - name: Cache cargo (tauri-cli)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-tauri
            ~/.cargo/bin/cargo-tauri.exe
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-tauri-v2
          restore-keys: |
            ${{ runner.os }}-cargo-tauri-
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI (cargo)
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          if command -v cargo-tauri >/dev/null 2>&1; then
            echo 'cargo-tauri 已存在，跳过安装'
          else
            # 优先带 --locked 安装，失败则回退
            if ! cargo install tauri-cli --locked ; then
              echo '使用 --locked 安装失败，尝试不加 --locked'
              cargo install tauri-cli || { echo '安装 tauri-cli 失败'; exit 1; }
            fi
          fi
          # 验证安装
          if ! command -v cargo-tauri >/dev/null 2>&1; then
            echo '未找到 cargo-tauri 可执行文件'; ls -al "$HOME/.cargo/bin"; exit 1;
          fi
          cargo tauri --version

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache Bun install cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Components & NDK
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

      - name: Install frontend deps
        run: bun install

      - name: Build frontend (bundle dist)
        run: bun run bundle

      - name: Init Android project (conditional)
        run: |
          if [ -d src-tauri/gen/android ]; then
            echo "Android 项目已存在，跳过 init"
          else
            cd src-tauri
            cargo tauri android init --force
          fi

      - name: Build Android Debug APK (universal)
        run: |
          cd src-tauri
          cargo tauri android build --apk

      - name: Upload Android Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: |
            src-tauri/gen/android/**/outputs/**/*.apk

      - name: Build Android Release APK (universal)
        run: |
          cd src-tauri
          cargo tauri android build --apk --release

      - name: Upload Android Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-release
          path: |
            src-tauri/gen/android/**/outputs/**/*.apk

  # iOS 构建（需要 macOS Runner，当前只生成未签名的 .app / .ipa Debug 产物）
  build-ios:
    if: github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: MoonBit CLI cache
        uses: actions/cache@v4
        with:
          path: ~/.moon
          key: ${{ runner.os }}-moon-${{ hashFiles('**/moon.pkg.json','moon.mod.json') }}
          restore-keys: |
            ${{ runner.os }}-moon-

      - name: Install MoonBit CLI
        run: |
          curl -fsSL https://cli.moonbitlang.cn/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          export PATH="$HOME/.moon/bin:$PATH"
          test -x "$HOME/.moon/bin/moon" || { echo 'MoonBit CLI 安装失败: 未找到 moon 可执行文件'; exit 1; }

      - name: MoonBit registry update
        run: |
          set -e
          if moon update; then
            echo "moon update 成功"
          else
            echo "[警告] moon update 失败(可能网络/registry)，继续后续构建" >&2
          fi

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node (npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies with npm
        run: |
          npm install
          npx wasm4 --version || echo "npx wasm4 暂不可用(可能未装), 继续"

      - name: Verify wasm4 via bun & npm
        run: |
          bun x wasm4 --version || echo "bun x wasm4 失败"
          npx wasm4 --version || echo "npx wasm4 失败"

      - name: Install Rust (iOS 目标)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios,aarch64-apple-ios-sim

      - name: Cache cargo (tauri-cli)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-tauri
            ~/.cargo/bin/cargo-tauri.exe
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-tauri-v2
          restore-keys: |
            ${{ runner.os }}-cargo-tauri-
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI (cargo)
        run: |
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          if command -v cargo-tauri >/dev/null 2>&1; then
            echo 'cargo-tauri 已存在，跳过安装'
          else
            if ! cargo install tauri-cli --locked ; then
              echo '使用 --locked 安装失败，尝试不加 --locked'
              cargo install tauri-cli || { echo '安装 tauri-cli 失败'; exit 1; }
            fi
          fi
          if ! command -v cargo-tauri >/dev/null 2>&1; then
            echo '未找到 cargo-tauri 可执行文件'; ls -al "$HOME/.cargo/bin"; exit 1;
          fi
          cargo tauri --version

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache Bun install cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend deps
        run: bun install

      - name: Build frontend (bundle dist)
        run: bun run bundle

      - name: Init iOS project (conditional)
        run: |
          if [ -d src-tauri/gen/apple ]; then
            echo "iOS 项目已存在，跳过 init"
          else
            cd src-tauri
            cargo tauri ios init --force
          fi

      - name: Build iOS Debug (simulator + device)
        run: |
          cd src-tauri
          cargo tauri ios build

      - name: Upload iOS Debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug
          path: |
            src-tauri/gen/apple/**/*.app
            src-tauri/gen/apple/**/Build/Products/**/*

      - name: Build iOS Release (simulator + device)
        run: |
          cd src-tauri
          cargo tauri ios build --release

      - name: Upload iOS Release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: |
            src-tauri/gen/apple/**/*.app
            src-tauri/gen/apple/**/Build/Products/**/*

      # 生成 .ipa 需要有效的签名证书与导出配置，这里暂不自动化打包 ipa